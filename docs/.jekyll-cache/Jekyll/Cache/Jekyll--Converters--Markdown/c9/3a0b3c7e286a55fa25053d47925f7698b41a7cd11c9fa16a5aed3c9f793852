I"d<h2 id="container-configuration">Container configuration</h2>

<p>In order to be able to install mariadb, we beed to enable Nesting option in the container after it is created.</p>

<h2 id="lamp-installation">LAMP installation</h2>

<h4 id="install-required-software">Install required software</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sudo apt install apache2 mariadb-server mariadb-client php libapache2-mod-php php-mysql
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="scure-mariadb">Scure mariadb</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sudo mysql_secure_installation
</pre></td></tr></tbody></table></code></pre></div></div>

<p>That’s it. LAMP is installed.</p>

<h2 id="lamp-configuration">LAMP Configuration</h2>

<h3 id="create-a-database">Create a database</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>sudo mariadb

MariaDB [(none)]&gt; CREATE DATABASE database_name;
MariaDB [(none)]&gt; GRANT ALL ON example_database.* TO 'user_name'@'localhost' IDENTIFIED BY 'password' WITH GRANT OPTION;
MariaDB [(none)]&gt; FLUSH PRIVILEGES;
MariaDB [(none)]&gt; exit
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="set-permission-for-the-web-dir">Set permission for the web dir</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sudo chown -R www-data:www-data /var/www
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="configure-apache---create-a-virtual-host-virtual-hosts">Configure Apache - create a Virtual Host (virtual hosts)</h3>

<h4 id="configure-virtual-host-without-a-domain">Configure Virtual Host without a domain</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sudo nano /etc/apache2/sites-available/your_domain.conf
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Add aliases for each of your projects located in www dir</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>        Alias /projecta /var/www/projecta
        Alias /projectb /var/www/projectb
        Alias /your_site_name /var/www/your_site_name
</pre></td></tr></tbody></table></code></pre></div></div>

<p>After that, those sites will be accessible at your_server_ip/your_site name</p>

<p>Site’s content needs to be place in corresponding ‘/var/www/your_site_name’ dir</p>

<h4 id="configure-virtual-host-with-a-domain">Configure Virtual Host with a domain</h4>

<p>1 - Disable default configuration</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sudo a2dissite 000-default
</pre></td></tr></tbody></table></code></pre></div></div>

<p>2 - Add the your_website configuration</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre>&lt;VirtualHost *:80&gt;
    ServerName your_domain
    ServerAlias www.your_domain 
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/your_domain
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
&lt;/VirtualHost&gt;

# In order to enable .htaccess in WP direcory to take effect:
# Alternatively, paste here contents of .htaccess.
&lt;Directory /var/www/your_domain/&gt;
    AllowOverride All
&lt;/Directory&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>See more about apache2 conf files and .htaccess and how to disable .htaccess for security and performance <a href="https://haydenjames.io/disable-htaccess-apache-performance/">here</a></p>

<p>Enable your_domain config in apache2</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sudo a2ensite your_domain
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Test new configuration for syntax (optional)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sudo apache2ctl configtest
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Reload Apache for changes to take effect</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sudo systemctl reload apache2
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="ssl">SSL</h2>

<p>Install Cetrbot and Certbot Apache Module</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>sudo apt install certbot
sudo apt install python-certbot-apache
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Get the certificate</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sudo certbot --apache -d your_domain -d www.your_domain
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This info is taken from <a href="https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-18-04">dititalocean</a>. Also here is an <a href="https://websiteforstudents.com/how-to-install-wordpress-with-apache2-and-lets-encrypt-ssl-tls-certificates-on-ubuntu-16-04-18-04/">alternative method</a></p>

<p>Debian 10 related: <a href="https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mariadb-php-lamp-stack-on-debian-10">digital ocean tutorial</a></p>
:ET