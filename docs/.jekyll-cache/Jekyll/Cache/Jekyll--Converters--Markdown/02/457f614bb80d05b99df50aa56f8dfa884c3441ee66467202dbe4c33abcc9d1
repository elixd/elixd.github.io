I"•<p><strong>Introduction</strong></p>

<p>MacOS has a good backup system which allows you to recover any files that have beed deleted or to restore previous versions of the files. I works like you can literally come back into a certain moment back in time.</p>

<p>Now that I have set up Raspberry Pi based home NAS, I found a solution that achieves the same results on linux: incrental backups with rsync.</p>

<p><strong>Instruction: how to automate backupsÂ onÂ Linux</strong></p>

<p><strong>Step 1. Set up rsync backup script, with instructions and settings on how to run the backup</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>sudo mkdir /usr/local/scripts      #to make folder to store scripts
sudo touch /usr/local/scripts/backup.sh # to create the script
sudo chmod +x  /usr/local/scripts/backup.sh  # make it executable
sudo nano /usr/local/scripts/backup.sh  #THEN EDIT THE SCRIPT:
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Copy this code into the script:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre># This script makes backups from DATADIR to BACKUPDIR and puts in 
# date-named folders corresponding to date of each backup
# SYNTAX:  $ ./backup.sh &lt;/DATADIR/ ($1)&gt; &lt;/BACKUPDIR/ ($2)&gt;
# Example: $ ./backup.sh /media/data/ /media/backup/

# To be able to use CTRL+C to exit script:
trap "exit" INT 

# Define the directories for backup
DATA=$1
LAST_BACKUP_PATH=$2/$(ls $2 | tail -n 1)
THIS_BACKUP_PATH=$2/backup_in_progress

# Make the backup
rsync -av --link-dest ${LAST_BACKUP_PATH} ${DATA} ${THIS_BACKUP_PATH}

# Move the backup to date-named folder after it's finished
mv $2/backup_in_progress $2$(date +%Y-%m-%d)
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Step 2. Set up cron job to run the backup script on a schedule</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>sudo crontab -e
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To backup DATA_DIR to BACKUP_DIR at 3am every night, add this to your cron file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre># BACKUP SCRITPS
# WHEN       SCRIPT DIR                    DATA_DIR     BACKUP_DIR
0 4 1 * *  /usr/local/scripts/backup.sh  /data/dir/  /backup/dir
0 3 * * *  /usr/local/scripts/backup.sh  /data2/dir/ /backup2/dir
# - - - - - CRON SYNTAX explained below:
# | | | | |
# | | | | ----- Day of week (0 - 7) (Sunday=0 or 7)
# | | | ------- Month (1 - 12)
# | | --------- Day of month (1 - 31)
# | ----------- Hour (0 - 23)
# ------------- Minute (0 - 59).  

'
fsf
dfdf
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Useful Links</strong></p>

<p>More on cron read <a href="https://www.cyberciti.biz/faq/how-do-i-add-jobs-to-cron-under-linux-or-unix-oses/">here</a>, or crontab calculator <a href="https://crontab.guru/">here</a></p>

<p>Bash scripts <a href="https://medium.com/tech-tajawal/writing-shell-scripts-the-beginners-guide-4778e2c4f609">101</a></p>

<p><a href="https://linuxconfig.org/how-to-create-incremental-backups-using-rsync-on-linux">https://linuxconfig.org/how-to-create-incremental-backups-using-rsync-on-linux</a></p>

<p><a href="http://www.mikerubel.org/computers/rsync_snapshots/">http://www.mikerubel.org/computers/rsync_snapshots/</a></p>

<p><a href="https://stackoverflow.com/questions/13778889/rsync-difference-between-size-only-and-ignore-times">https://stackoverflow.com/questions/13778889/rsync-difference-between-size-only-and-ignore-times</a></p>

<p><a href="https://unix.stackexchange.com/questions/102211/rsync-ignore-owner-group-time-and-perms">https://unix.stackexchange.com/questions/102211/rsync-ignore-owner-group-time-and-perms</a></p>

:ET